import axios from "axios"; // make sure this is at the top

const handleSubmit = async (e) => {
  e.preventDefault();

  if (!form.cardType) {
    alert("Please select a card type before submitting");
    return;
  }

  try {
    const formData = new FormData();
    for (const key in form) formData.append(key, form[key]);
    formData.append("idProof", uploads.idProof);
    formData.append("panCard", uploads.panCard);
    formData.append("photo", uploads.photo);

    // ✅ POST to Spring Boot backend
    await axios.post("http://localhost:8080/api/applications", formData, {
      headers: { "Content-Type": "multipart/form-data" },
    });

    setShowModal(false);
    setShowSuccess(true);
    setTimeout(() => setShowSuccess(false), 2000);

    setStep(1);
    setForm({
      userid: "",
      name: "",
      address: "",
      mobile: "",
      email: "",
      pan: "",
      dob: "",
      profession: "",
      cardType: "",
    });
    setUploads({ idProof: null, panCard: null, photo: null });
  } catch (err) {
    console.error("Error submitting form:", err);
    alert("Submission failed. Please try again.");
  }
};





# Enable multipart uploads
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=20MB

-----------------------------------------------------



package com.bank.entity;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Data
@Entity
@Table(name = "applications")
public class Application {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String userid;
    private String name;
    private String address;
    private String mobile;
    private String email;
    private String pan;
    private String dob;
    private String profession;
    private String cardType;
    private LocalDateTime createdAt = LocalDateTime.now();
}
---------------------------------------


package com.bank.repository;

import com.bank.entity.Application;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ApplicationRepository extends JpaRepository<Application, Long> {}
-------------------------------------------

package com.bank.controller;

import com.bank.entity.Application;
import com.bank.repository.ApplicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import java.io.File;
import java.io.IOException;

@RestController
@RequestMapping("/api/applications")
@CrossOrigin(origins = "http://localhost:3000") // React app URL
public class ApplicationController {

    @Autowired
    private ApplicationRepository applicationRepository;

    @PostMapping
    public ResponseEntity<?> saveApplication(
            @RequestParam("userid") String userid,
            @RequestParam("name") String name,
            @RequestParam("address") String address,
            @RequestParam("mobile") String mobile,
            @RequestParam("email") String email,
            @RequestParam("pan") String pan,
            @RequestParam("dob") String dob,
            @RequestParam("profession") String profession,
            @RequestParam("cardType") String cardType,
            @RequestParam(value = "idProof", required = false) MultipartFile idProof,
            @RequestParam(value = "panCard", required = false) MultipartFile panCard,
            @RequestParam(value = "photo", required = false) MultipartFile photo
    ) {
        try {
            // Save files locally
            String uploadDir = "uploads/";
            new File(uploadDir).mkdirs();

            if (idProof != null) idProof.transferTo(new File(uploadDir + idProof.getOriginalFilename()));
            if (panCard != null) panCard.transferTo(new File(uploadDir + panCard.getOriginalFilename()));
            if (photo != null) photo.transferTo(new File(uploadDir + photo.getOriginalFilename()));

            // Save form data to DB
            Application app = new Application();
            app.setUserid(userid);
            app.setName(name);
            app.setAddress(address);
            app.setMobile(mobile);
            app.setEmail(email);
            app.setPan(pan);
            app.setDob(dob);
            app.setProfession(profession);
            app.setCardType(cardType);

            applicationRepository.save(app);

            return ResponseEntity.ok("Application saved successfully!");
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("File upload failed");
        }
    }
}

----------------------------------------

package com.bank.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "applications")
public class Application {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String userid;
    private String name;
    private String address;
    private String mobile;
    private String email;
    private String pan;
    private String dob;
    private String profession;
    private String cardType;
    private LocalDateTime createdAt = LocalDateTime.now();

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUserid() { return userid; }
    public void setUserid(String userid) { this.userid = userid; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public String getMobile() { return mobile; }
    public void setMobile(String mobile) { this.mobile = mobile; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPan() { return pan; }
    public void setPan(String pan) { this.pan = pan; }

    public String getDob() { return dob; }
    public void setDob(String dob) { this.dob = dob; }

    public String getProfession() { return profession; }
    public void setProfession(String profession) { this.profession = profession; }

    public String getCardType() { return cardType; }
    public void setCardType(String cardType) { this.cardType = cardType; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}
---------------------------



@PostMapping
public ResponseEntity<?> saveApplication(
        @RequestParam("userid") String userid,
        @RequestParam("name") String name,
        @RequestParam("address") String address,
        @RequestParam("mobile") String mobile,
        @RequestParam("email") String email,
        @RequestParam("pan") String pan,
        @RequestParam("dob") String dob,
        @RequestParam("profession") String profession,
        @RequestParam("cardType") String cardType,
        @RequestParam(value = "idProof", required = false) MultipartFile idProof,
        @RequestParam(value = "panCard", required = false) MultipartFile panCard,
        @RequestParam(value = "photo", required = false) MultipartFile photo
) {
    try {
        // ✅ Save directly to Desktop "uploads" folder
        String desktopPath = System.getProperty("user.home") + "/Desktop/uploads/";
        File directory = new File(desktopPath);
        if (!directory.exists()) directory.mkdirs();  // create folder if not exists

        if (idProof != null && !idProof.isEmpty())
            idProof.transferTo(new File(desktopPath + idProof.getOriginalFilename()));

        if (panCard != null && !panCard.isEmpty())
            panCard.transferTo(new File(desktopPath + panCard.getOriginalFilename()));

        if (photo != null && !photo.isEmpty())
            photo.transferTo(new File(desktopPath + photo.getOriginalFilename()));

-------------------------------



@PostMapping
public ResponseEntity<?> saveApplication(
        @RequestParam("userid") String userid,
        @RequestParam("name") String name,
        @RequestParam("address") String address,
        @RequestParam("mobile") String mobile,
        @RequestParam("email") String email,
        @RequestParam("pan") String pan,
        @RequestParam("dob") String dob,
        @RequestParam("profession") String profession,
        @RequestParam("cardType") String cardType,
        @RequestParam(value = "idProof", required = false) MultipartFile idProof,
        @RequestParam(value = "panCard", required = false) MultipartFile panCard,
        @RequestParam(value = "photo", required = false) MultipartFile photo
) {
    try {
        Application app = new Application();
        app.setUserid(userid);
        app.setName(name);
        app.setAddress(address);
        app.setMobile(mobile);
        app.setEmail(email);
        app.setPan(pan);
        app.setDob(dob);
        app.setProfession(profession);
        app.setCardType(cardType);

        // ✅ Save file bytes directly into DB
        if (idProof != null && !idProof.isEmpty()) app.setIdProof(idProof.getBytes());
        if (panCard != null && !panCard.isEmpty()) app.setPanCard(panCard.getBytes());
        if (photo != null && !photo.isEmpty()) app.setPhoto(photo.getBytes());

        Application savedApp = applicationRepository.save(app);
        return ResponseEntity.ok("✅ Application ID " + savedApp.getId() + " saved successfully with files in DB.");
    } catch (Exception e) {
        e.printStackTrace();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("❌ Error saving application: " + e.getMessage());
    }
}
