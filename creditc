package com.bank.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "applications")
public class Application {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String userid;
    private String name;
    private String address;
    private String mobile;
    private String email;
    private String pan;
    private String dob;
    private String profession;
    private String cardType;

    @Lob
    @Column(name = "id_proof")
    private byte[] idProof;

    @Lob
    @Column(name = "pan_card")
    private byte[] panCard;

    @Lob
    @Column(name = "photo")
    private byte[] photo;

    private LocalDateTime createdAt;

    // --- Getters and Setters ---
    public byte[] getIdProof() { return idProof; }
    public void setIdProof(byte[] idProof) { this.idProof = idProof; }

    public byte[] getPanCard() { return panCard; }
    public void setPanCard(byte[] panCard) { this.panCard = panCard; }

    public byte[] getPhoto() { return photo; }
    public void setPhoto(byte[] photo) { this.photo = photo; }

    // + all other getters/setters (userid, name, etc.)
}

-----------------------------------------------------------
@PostMapping(consumes = {"multipart/form-data"})
public String saveApplication(
        @RequestParam("userid") String userid,
        @RequestParam("name") String name,
        @RequestParam("address") String address,
        @RequestParam("mobile") String mobile,
        @RequestParam("email") String email,
        @RequestParam("pan") String pan,
        @RequestParam("dob") String dob,
        @RequestParam("profession") String profession,
        @RequestParam("cardType") String cardType,
        @RequestParam(value = "idProof", required = false) MultipartFile idProof,
        @RequestParam(value = "panCard", required = false) MultipartFile panCard,
        @RequestParam(value = "photo", required = false) MultipartFile photo
) {
    try {
        Application app = new Application();
        app.setUserid(userid);
        app.setName(name);
        app.setAddress(address);
        app.setMobile(mobile);
        app.setEmail(email);
        app.setPan(pan);
        app.setDob(dob);
        app.setProfession(profession);
        app.setCardType(cardType);
        app.setCreatedAt(LocalDateTime.now());

        // Save file bytes directly into DB
        if (idProof != null && !idProof.isEmpty()) {
            app.setIdProof(idProof.getBytes());
        }

        if (panCard != null && !panCard.isEmpty()) {
            app.setPanCard(panCard.getBytes());
        }

        if (photo != null && !photo.isEmpty()) {
            app.setPhoto(photo.getBytes());
        }

        applicationRepository.save(app);
        return "✅ Files saved directly to PostgreSQL.";

    } catch (Exception e) {
        e.printStackTrace();
        return "❌ Upload failed: " + e.getMessage();
    }
}
--------------------------------------------------


@GetMapping("/file/{id}/{type}")
public ResponseEntity<byte[]> getFile(@PathVariable Long id, @PathVariable String type) {
    Application app = applicationRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Application not found"));

    byte[] data = null;
    String filename = "";

    switch (type.toLowerCase()) {
        case "idproof":
            data = app.getIdProof();
            filename = "idproof";
            break;
        case "pancard":
            data = app.getPanCard();
            filename = "pancard";
            break;
        case "photo":
            data = app.getPhoto();
            filename = "photo";
            break;
        default:
            return ResponseEntity.badRequest().build();
    }

    if (data == null) return ResponseEntity.notFound().build();

    return ResponseEntity.ok()
            .header("Content-Type", "application/octet-stream")
            .header("Content-Disposition", "inline; filename=" + filename)
            .body(data);
}


