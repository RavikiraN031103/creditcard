import React, { useState, useEffect, useRef } from "react";
import "./Main.css";

export default function Main() {
  const [form, setForm] = useState({
    userid: "",
    name: "",
    address: "",
    mobile: "",
    email: "",
    pan: "",
    dob: "",
    profession: "",
    cardType: "",
  });
  const [step, setStep] = useState(1);
  const [uploads, setUploads] = useState({
    idProof: null,
    panCard: null,
    photo: null,
  });
  const [slide, setSlide] = useState(0);
  const [open, setOpen] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const intervalRef = useRef(null);

  const slides = [
    { title: "Enjoy benefits", text: "worth up to â‚¹500/- off on your tickets" },
    {
      title: "Earn",
      text: "6X-12X REWARD POINTS on flights, hotels and shopping vouchers.",
    },
    { title: "Get", text: "Activation voucher with Flat â‚¹1,200/- off" },
  ];

  // Auto carousel
  useEffect(() => {
    startAutoSlide();
    return () => stopAutoSlide();
  }, []);

  const startAutoSlide = () => {
    stopAutoSlide();
    intervalRef.current = setInterval(() => {
      setSlide((prev) => (prev + 1) % slides.length);
    }, 3000);
  };

  const stopAutoSlide = () => {
    if (intervalRef.current) clearInterval(intervalRef.current);
  };

  // Validations
  const validateStep1 = () => {
    const nameRegex = /^[A-Za-z ]+$/;
    const mobileRegex = /^\d{10}$/;
    const addressRegex = /^[A-Za-z0-9 ,.-]+$/;
    const panRegex = /^[A-Za-z0-9]+$/;

    if (!form.userid) return alert("User ID is required"), false;
    if (!form.name || !nameRegex.test(form.name))
      return alert("Full name should contain only alphabets"), false;
    if (!form.address || !addressRegex.test(form.address))
      return alert(
        "Address should contain only alphabets, numbers, commas, or periods"
      ), false;
    if (!mobileRegex.test(form.mobile))
      return alert("Mobile number should contain exactly 10 digits"), false;
    if (!form.email.includes("@"))
      return alert("Enter a valid email"), false;
    if (!form.pan || !panRegex.test(form.pan))
      return alert("PAN should contain only alphabets and numbers"), false;
    return true;
  };

  const handleNext = (e) => {
    e.preventDefault();
    if (validateStep1()) setStep(2);
  };

  const handleNext2 = (e) => {
    e.preventDefault();
    if (!uploads.idProof || !uploads.panCard || !uploads.photo) {
      alert("Please upload all required documents");
      return;
    }
    setStep(3);
  };

  const handleFileChange = (e) => {
    const { name, files } = e.target;
    setUploads({ ...uploads, [name]: files[0] });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.cardType) {
      alert("Please select a card type before submitting");
      return;
    }
    setShowModal(false);
    setShowSuccess(true);
    setTimeout(() => setShowSuccess(false), 2000);
    setStep(1);
    setForm({
      userid: "",
      name: "",
      address: "",
      mobile: "",
      email: "",
      pan: "",
      dob: "",
      profession: "",
      cardType: "",
    });
    setUploads({ idProof: null, panCard: null, photo: null });
  };

  const handleClose = () => {
    setShowModal(false);
    setStep(1);
  };

  const faqs = [
    {
      q: "What is the lowest Credit Card limit?",
      a: "The Credit Card limit varies depending on the Card issuer.",
    },
    {
      q: "How do I see my Credit Card number online?",
      a: "Login to your Standard Chartered netbanking or app to view it.",
    },
    {
      q: "How can I redeem Credit Card points for rewards?",
      a: "Visit the rewards portal to redeem your points.",
    },
    {
      q: "How do I avail the BookMyShow offer?",
      a: "Offers are available under the entertainment category.",
    },
  ];

  return (
    <main className="main">
      {/* Hero Section */}
      <section className="hero">
        <div className="hero-left">
          <h1>Your lifestyle, empowered by Standard Chartered</h1>
          <p>No Joining Fee & No Annual Fee</p>
          <div className="features">
            <div className="feature">ðŸ’³ Global Banking Advantage</div>
            <div className="feature-sub">
              Enjoy Reward Points on every purchase
            </div>
            <div className="feature-sub">Access exclusive airport lounges</div>
          </div>
          <button className="apply-btn" onClick={() => setShowModal(true)}>
            Apply Now
          </button>
        </div>

        <div className="hero-right">
          <div className="placeholder-image">[ Image Placeholder ]</div>
        </div>
      </section>

      {/* Privileges Section */}
      <section className="privileges">
        <h2>Exclusive Privileges</h2>
        <div
          className="carousel"
          onMouseEnter={stopAutoSlide}
          onMouseLeave={startAutoSlide}
        >
          <div
            className="cards"
            style={{ transform: `translateX(-${slide * 280}px)` }}
          >
            {slides.map((s, i) => (
              <div key={i} className={`card ${i === slide ? "active" : ""}`}>
                <h3>{s.title}</h3>
                <p>{s.text}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="faq">
        <div className="faq-box">
          <h2>FAQs</h2>
          {faqs.map((f, i) => (
            <div key={i} className={`faq-item ${open === i ? "open" : ""}`}>
              <button
                className="faq-question"
                onClick={() => setOpen(open === i ? null : i)}
              >
                {open === i ? "âœ–" : "+"} {f.q}
              </button>
              {open === i && <p className="faq-answer">{f.a}</p>}
            </div>
          ))}
          <button className="view-more">View More</button>
        </div>
      </section>

      {/* Application Modal */}
      {showModal && (
        <div className="modal-overlay" onClick={handleClose}>
          <div className="modal-box" onClick={(e) => e.stopPropagation()}>
            <button className="close-btn" onClick={handleClose}>
              âœ–
            </button>

            <form
              className="form"
              onSubmit={
                step === 1 ? handleNext : step === 2 ? handleNext2 : handleSubmit
              }
            >
              <h2>Application Form â€” Step {step} of 3</h2>

              {step === 1 && (
                <>
                  <label>
                    User ID
                    <input
                      value={form.userid}
                      onChange={(e) =>
                        setForm({ ...form, userid: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    Full Name
                    <input
                      value={form.name}
                      onChange={(e) =>
                        setForm({ ...form, name: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    Address
                    <textarea
                      value={form.address}
                      onChange={(e) =>
                        setForm({ ...form, address: e.target.value })
                      }
                    ></textarea>
                  </label>
                  <label>
                    Mobile Number
                    <input
                      value={form.mobile}
                      onChange={(e) =>
                        setForm({ ...form, mobile: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    Email
                    <input
                      value={form.email}
                      onChange={(e) =>
                        setForm({ ...form, email: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    PAN Number
                    <input
                      value={form.pan}
                      onChange={(e) =>
                        setForm({ ...form, pan: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    Date of Birth
                    <input
                      value={form.dob}
                      onChange={(e) =>
                        setForm({ ...form, dob: e.target.value })
                      }
                    />
                  </label>
                  <label>
                    Profession
                    <select
                      value={form.profession}
                      onChange={(e) =>
                        setForm({ ...form, profession: e.target.value })
                      }
                    >
                      <option value="">Select</option>
                      <option>Student</option>
                      <option>Employee</option>
                      <option>Self Employed</option>
                    </select>
                  </label>
                  <button type="submit">Next</button>
                </>
              )}

              {step === 2 && (
                <>
                  <label>
                    Upload ID Proof
                    <input
                      type="file"
                      name="idProof"
                      onChange={handleFileChange}
                    />
                  </label>
                  <label>
                    Upload PAN Card
                    <input
                      type="file"
                      name="panCard"
                      onChange={handleFileChange}
                    />
                  </label>
                  <label>
                    Upload Photograph
                    <input
                      type="file"
                      name="photo"
                      onChange={handleFileChange}
                    />
                  </label>
                  <div className="form-nav">
                    <button type="button" onClick={() => setStep(1)}>
                      Back
                    </button>
                    <button type="submit">Next</button>
                  </div>
                </>
              )}

              {step === 3 && (
                <>
                  <label>
                    Choose Card Type
                    <select
                      value={form.cardType}
                      onChange={(e) =>
                        setForm({ ...form, cardType: e.target.value })
                      }
                    >
                      <option value="">Select Card Type</option>
                      <option>Platinum Card</option>
                      <option>Titanium Card</option>
                      <option>Cashback Card</option>
                      <option>Rewards Card</option>
                      <option>Infinite Card</option>
                    </select>
                  </label>
                  <div className="form-nav">
                    <button type="button" onClick={() => setStep(2)}>
                      Back
                    </button>
                    <button type="submit">Submit</button>
                  </div>
                </>
              )}
            </form>
          </div>
        </div>
      )}

      {/* Success Modal */}
      {showSuccess && (
        <div className="success-overlay">
          <div className="success-box">
            <h3>âœ… Application Submitted Successfully!</h3>
            <button onClick={() => setShowSuccess(false)}>Close</button>
          </div>
        </div>
      )}
    </main>
  );
}

















/* --- Modal box scroll fix --- */
.modal-box {
  background: #f2f8fb;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 114, 187, 0.4), 0 4px 15px rgba(0, 0, 0, 0.2);
  width: 420px;
  max-height: 90vh;             /* âœ… Prevent modal from going out of page */
  overflow-y: auto;             /* âœ… Scroll inside modal */
  position: relative;
  animation: zoomIn 0.3s ease;
}

/* Optional: smooth scrollbar for modal content */
.modal-box::-webkit-scrollbar {
  width: 6px;
}
.modal-box::-webkit-scrollbar-thumb {
  background-color: rgba(0, 114, 187, 0.4);
  border-radius: 10px;
}

/* --- Responsive adjustment --- */
@media (max-width: 600px) {
  .modal-box {
    width: 90%;
    height: auto;
    max-height: 90vh;
  }
}
